// -*- mode:c++ -*-

// Copyright (c) 2022 PLCT Lab
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def format FHEOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'FHEOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};

let {{
    def setVlen():
        return "uint32_t vlen = VlenbBits * 8;\n"
    def setVlenb():
        return "uint32_t vlenb = VlenbBits;\n"
    def setDestWrapper(destRegId):
        return "setDestRegIdx(_numDestRegs++, " + destRegId + ");\n" + \
               "_numTypedDestRegs[VecRegClass]++;\n"
    def setSrcWrapper(srcRegId):
        return "setSrcRegIdx(_numSrcRegs++, " + srcRegId + ");\n"
    def setSrcVm():
        return "if (!this->vm)\n" + \
               "    setSrcRegIdx(_numSrcRegs++, vecRegClass[0]);"
    def vmDeclAndReadData():
        return '''
            [[maybe_unused]] RiscvISA::vreg_t tmp_v0;
            [[maybe_unused]] uint8_t* v0;
            if(!machInst.vm) {
                xc->getRegOperand(this, _numSrcRegs-1, &tmp_v0);
                v0 = tmp_v0.as<uint8_t>();
            }
        '''
    def copyOldVd(vd_idx):
        return 'COPY_OLD_VD(%d);' % vd_idx
    def loopWrapper(code, micro_inst = True):
        if micro_inst:
            upper_bound = "this->microVl"
        else:
            upper_bound = "(uint32_t)machInst.vl"
        return '''
            for (uint32_t i = 0; i < %s; i++) {
                %s
            }
        ''' % (upper_bound, code)
    def maskCondWrapper(code):
        return "if (this->vm || elem_mask(v0, ei)) {\n" + \
               code + "}\n"
    def eiDeclarePrefix(code, widening = False):
        if widening:
            return '''
            uint32_t ei = i + micro_vlmax * this->microIdx;
            ''' + code
        else:
            return '''
            uint32_t ei = i + vtype_VLMAX(vtype, vlen, true) * this->microIdx;
            ''' + code

    def declareVArithTemplate(
        class_name, type_name='uint', min_size=8, max_size=64):
        sizes = [8, 16, 32, 64]
        code = ''
        for size in sizes:
            if size < min_size or size > max_size:
                continue
            code += f'template class {class_name}<{type_name}{size}_t>;\n'
        return code

}};

def format VectorVXXFormat(code, *flags) {{
    macroop_class_name = 'VectorArithMacroInst'
    microop_class_name = 'VectorArithMicroInst'

    iop = InstObjParams(
        name,
        Name,
        macroop_class_name,
        {'code': code,
         'declare_varith_template': declareVArithTemplate(Name)},
        flags
    )
    inst_name, inst_suffix = name.split("_", maxsplit=1)
    v0_required = inst_name not in ["vmv"]
    mask_cond = v0_required and (inst_suffix not in ['vvm', 'vxm', 'vim'])
    need_elem_idx = mask_cond or code.find("ei") != -1

    dest_reg_id = "vecRegClass[_machInst.vd + _microIdx]"

    num_src_regs = 0

    src2_reg_id = "intRegClass[_machInst.rs2]"
    num_src_regs += 1

    src1_reg_id = "intRegClass[_machInst.rs1]"
    num_src_regs += 1

    old_vd_idx = num_src_regs
    src3_reg_id = "vecRegClass[_machInst.vd + _microIdx]"

    set_dest_reg_idx = setDestWrapper(dest_reg_id)

    set_src_reg_idx = ""
    set_src_reg_idx += setSrcWrapper(src1_reg_id)
    set_src_reg_idx += setSrcWrapper(src2_reg_id)
    set_src_reg_idx += setSrcWrapper(src3_reg_id)
    if v0_required:
        set_src_reg_idx += setSrcVm()

    # code
    if mask_cond:
        code = maskCondWrapper(code)
    if need_elem_idx:
        code = eiDeclarePrefix(code)
    code = loopWrapper(code)

    vm_decl_rd = ""
    if v0_required:
        vm_decl_rd = vmDeclAndReadData()

    set_vlenb = setVlenb()
    set_vlen = setVlen() if need_elem_idx else ""

    microiop = InstObjParams(name + "_micro",
        Name + "Micro",
        microop_class_name,
        {'code': code,
         'set_dest_reg_idx': set_dest_reg_idx,
         'set_src_reg_idx': set_src_reg_idx,
         'set_vlenb' : set_vlenb,
         'set_vlen' : set_vlen,
         'vm_decl_rd': vm_decl_rd,
         'copy_old_vd': copyOldVd(old_vd_idx),
         'declare_varith_template': declareVArithTemplate(Name + "Micro")},
        flags)

    header_output = \
        VectorIntMicroDeclare.subst(microiop) + \
        VectorIntMacroDeclare.subst(iop)
    decoder_output = \
        VectorIntMicroConstructor.subst(microiop) + \
        VectorIntMacroConstructor.subst(iop)
    exec_output = VectorIntMicroExecute.subst(microiop)
    decode_block = VectorIntDecodeBlock.subst(iop)
}};
