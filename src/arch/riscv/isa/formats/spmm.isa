def format LDVALIDXOp(
    memacc_code,
    ea_code={{
        EA = Rd;
    }},
    mem_flags=[],
    inst_flags=[]
) {{
    mem_flags = makeList(mem_flags)
    inst_flags = makeList(inst_flags)

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'ea_code': ea_code,
         'memacc_code': memacc_code},
        inst_flags)

    if mem_flags:
        mem_flags = [ 'Request::%s' % flag for flag in mem_flags ]
        s = '\n\tmemAccessFlags = ' + '|'.join(mem_flags) + ';'
        iop.constructor += s


    header_output   = SpMMMemDeclare.subst(iop)
    decoder_output  = LDVALIDXConstructor.subst(iop)
    decode_block    = SpMMMemBaseDecodeBlock.subst(iop)
    exec_output     = (LDVALIDXExecute.subst(iop) +
        LDVALIDXInitiateAcc.subst(iop) +
        LDVALIDXCompleteAcc.subst(iop))

}};

def format VSMVOp(code, *flags) {{

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'code': code, 'imm_code': 'imm = IMM7 & (vlen-1);'}, flags)

    header_output   = SpMMVSMVDeclare.subst(iop)
    decoder_output  = SpMMVSMVConstructor.subst(iop)
    decode_block    = SpMMDecodeBlock.subst(iop)
    exec_output     = SpMMVSMVExecute.subst(iop)

}};

def format LDPRFOp(
    memacc_code,
    ea1_code={{
        EA = Rs1;
    }},
    ea2_code={{
        EA = Rs2;
    }},
    mem_flags=[],
    inst_flags=[]
) {{
    mem_flags = makeList(mem_flags)
    inst_flags = makeList(inst_flags)

    iop = InstObjParams(name + 'Macro', Name + 'Macro', 'SpMMMacroInst',
        { }, inst_flags)

    micro1iop = InstObjParams(name + 'Micro1',
        Name + 'Micro1',
        'SpMMMicroInst',
        {'memacc_code': memacc_code,
         'ea_code': ea1_code},
        inst_flags)

    micro2iop = InstObjParams(name + 'Micro2',
        Name + 'Micro2',
        'SpMMMicroInst',
        {'memacc_code': memacc_code,
        'ea_code': ea2_code},
        inst_flags)

    header_output   = (LDPRFMacroDeclare.subst(iop) +
                      LDPRFMicro1Declare.subst(micro1iop) +
                      LDPRFMicro2Declare.subst(micro2iop))
    decoder_output  = (LDPRFMacroConstructor.subst(iop) +
                      LDPRFMicro1Constructor.subst(micro1iop) +
                      LDPRFMicro2Constructor.subst(micro2iop))
    decode_block    = SpMMMemBaseDecodeBlock.subst(iop)
    exec_output     = (LDPRFMicro1Execute.subst(micro1iop) +
                      LDPRFMicro1InitiateAcc.subst(micro1iop) +
                      LDPRFMicro1CompleteAcc.subst(micro1iop) +
                      LDPRFMicro2Execute.subst(micro2iop) +
                      LDPRFMicro2InitiateAcc.subst(micro2iop) +
                      LDPRFMicro2CompleteAcc.subst(micro2iop))
}};

def format VSMULOp(code, *flags) {{

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'code': code, 'imm_code': 'imm = IMM7 & (vlen-1);'}, flags)

    header_output   = SpMMVSMULDeclare.subst(iop)
    decoder_output  = SpMMVSMULConstructor.subst(iop)
    decode_block    = SpMMDecodeBlock.subst(iop)
    exec_output     = SpMMVSMULExecute.subst(iop)

}};

def format STPSOp(code, *flags) {{

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'code': code}, flags)

    header_output   = SpMMSTPSDeclare.subst(iop)
    decoder_output  = SpMMSTPSConstructor.subst(iop)
    decode_block    = SpMMDecodeBlock.subst(iop)
    exec_output     = SpMMSTPSExecute.subst(iop)

}};

def format MERGEOp(code, *flags) {{

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'code': code}, flags)

    header_output   = SpMMMERGEDeclare.subst(iop)
    decoder_output  = SpMMMERGEConstructor.subst(iop)
    decode_block    = SpMMDecodeBlock.subst(iop)
    exec_output     = SpMMMERGEExecute.subst(iop)

}};

def format STRESOp(
    ea_code,
    mem_flags=[],
    inst_flags=[]
) {{
    mem_flags = makeList(mem_flags)
    inst_flags = makeList(inst_flags)

    iop = InstObjParams(name, Name, 'SpMMInst',
        {'ea_code': ea_code}, inst_flags)

    if mem_flags:
        mem_flags = [ 'Request::%s' % flag for flag in mem_flags ]
        s = '\n\tmemAccessFlags = ' + '|'.join(mem_flags) + ';'
        iop.constructor += s

    header_output   = STRESDeclare.subst(iop)
    decoder_output  = STRESConstructor.subst(iop)
    decode_block    = SpMMMemBaseDecodeBlock.subst(iop)
    exec_output     = (STRESExecute.subst(iop) +
        STRESInitiateAcc.subst(iop) +
        STRESCompleteAcc.subst(iop))

}};
